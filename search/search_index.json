{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Elixir 101 This is the companion documentation to my Elixir 101 course. Prerequisites First, make sure that you have all the prequisites . Basics With the prerequisites out of the way, proceed to learn Elixir Basics .","title":"Home"},{"location":"#elixir-101","text":"This is the companion documentation to my Elixir 101 course.","title":"Elixir 101"},{"location":"#prerequisites","text":"First, make sure that you have all the prequisites .","title":"Prerequisites"},{"location":"#basics","text":"With the prerequisites out of the way, proceed to learn Elixir Basics .","title":"Basics"},{"location":"0-prerequisites/linux/","text":"Linux Prerequisites Install required packages asdf erlang elixir Install required packages For more detailed instructions, see https://github.com/asdf-vm/asdf-erlang#ubuntu-and-debian Ubuntu $ sudo apt update $ sudo apt -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-dev \\ libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev libsctp-dev unixodbc-dev xsltproc xmllint fop Install asdf asdf is an extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more: https://asdf-vm.com Install it following the instructions at https://asdf-vm.com/#/core-manage-asdf-vm?id=install-asdf-vm git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.8 Add asdf to your shell Using Bash: echo '. $HOME/.asdf/asdf.sh' >> ~/.bashrc Logout then log back in, or source ~/.bashrc then verify asdf installation: $ asdf --version v0.7.8-4a3e3d6 Install Erlang Using asdf , first install Erlang. As of this writing, the latest stable version is 22.3.3: asdf plugin add erlang asdf install erlang 22.3.3 (The last command above can take a while to finish, and will need to download about 53.2MB of data.) Afterwards, set the global erlang version: asdf global erlang 22.3.3 Verify Erlang installation: $ erl -s erlang halt Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1] [hipe] Install Elixir Again using asdf , now install Elixir. As of this writing, the latest stable version is 1.10.3: asdf plugin add elixir asdf install elixir 1.10.3 asdf global elixir 1.10.3 Verify Elixir installation: $ elixir --version Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1] [hipe] Elixir 1.10.3 (compiled with Erlang/OTP 21) You may now proceed to the Basics .","title":"Linux"},{"location":"0-prerequisites/linux/#linux-prerequisites","text":"Install required packages asdf erlang elixir","title":"Linux Prerequisites"},{"location":"0-prerequisites/linux/#install-required-packages","text":"For more detailed instructions, see https://github.com/asdf-vm/asdf-erlang#ubuntu-and-debian Ubuntu $ sudo apt update $ sudo apt -y install build-essential autoconf m4 libncurses5-dev libwxgtk3.0-dev \\ libgl1-mesa-dev libglu1-mesa-dev libpng-dev libssh-dev libsctp-dev unixodbc-dev xsltproc xmllint fop","title":"Install required packages"},{"location":"0-prerequisites/linux/#install-asdf","text":"asdf is an extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more: https://asdf-vm.com Install it following the instructions at https://asdf-vm.com/#/core-manage-asdf-vm?id=install-asdf-vm git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.8 Add asdf to your shell Using Bash: echo '. $HOME/.asdf/asdf.sh' >> ~/.bashrc Logout then log back in, or source ~/.bashrc then verify asdf installation: $ asdf --version v0.7.8-4a3e3d6","title":"Install asdf"},{"location":"0-prerequisites/linux/#install-erlang","text":"Using asdf , first install Erlang. As of this writing, the latest stable version is 22.3.3: asdf plugin add erlang asdf install erlang 22.3.3 (The last command above can take a while to finish, and will need to download about 53.2MB of data.) Afterwards, set the global erlang version: asdf global erlang 22.3.3 Verify Erlang installation: $ erl -s erlang halt Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1] [hipe]","title":"Install Erlang"},{"location":"0-prerequisites/linux/#install-elixir","text":"Again using asdf , now install Elixir. As of this writing, the latest stable version is 1.10.3: asdf plugin add elixir asdf install elixir 1.10.3 asdf global elixir 1.10.3 Verify Elixir installation: $ elixir --version Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:2:2] [ds:2:2:10] [async-threads:1] [hipe] Elixir 1.10.3 (compiled with Erlang/OTP 21) You may now proceed to the Basics .","title":"Install Elixir"},{"location":"0-prerequisites/mac_os/","text":"macOS Prerequisites Homebrew asdf erlang elixir Install Homebrew Homebrew bills itself as the missing package manager for macOS. Follow the instructions on https://brew.sh to install: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\" Install asdf asdf is an extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more: https://asdf-vm.com Install it using Homebrew brew install asdf Install Erlang Using asdf , first install Erlang. As of this writing, the latest stable version is 22.3.3: asdf plugin add erlang asdf install erlang 22.3.3 (The last command above can take a while to finish, and will need to download about 53.2MB of data.) Afterwards, set the global erlang version: asdf global erlang 22.3.3 Verify Erlang installation: $ erl -s halt Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Install Elixir Again using asdf , now install Elixir. As of this writing, the latest stable version is 1.10.3: asdf plugin add elixir asdf install elixir 1.10.3 asdf global elixir 1.10.3 Verify Elixir installation: $ elixir --version Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Elixir 1.10.3 (compiled with Erlang/OTP 21) You may now proceed to the Basics .","title":"Mac os"},{"location":"0-prerequisites/mac_os/#macos-prerequisites","text":"Homebrew asdf erlang elixir","title":"macOS Prerequisites"},{"location":"0-prerequisites/mac_os/#install-homebrew","text":"Homebrew bills itself as the missing package manager for macOS. Follow the instructions on https://brew.sh to install: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"","title":"Install Homebrew"},{"location":"0-prerequisites/mac_os/#install-asdf","text":"asdf is an extendable version manager with support for Ruby, Node.js, Elixir, Erlang & more: https://asdf-vm.com Install it using Homebrew brew install asdf","title":"Install asdf"},{"location":"0-prerequisites/mac_os/#install-erlang","text":"Using asdf , first install Erlang. As of this writing, the latest stable version is 22.3.3: asdf plugin add erlang asdf install erlang 22.3.3 (The last command above can take a while to finish, and will need to download about 53.2MB of data.) Afterwards, set the global erlang version: asdf global erlang 22.3.3 Verify Erlang installation: $ erl -s halt Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe]","title":"Install Erlang"},{"location":"0-prerequisites/mac_os/#install-elixir","text":"Again using asdf , now install Elixir. As of this writing, the latest stable version is 1.10.3: asdf plugin add elixir asdf install elixir 1.10.3 asdf global elixir 1.10.3 Verify Elixir installation: $ elixir --version Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Elixir 1.10.3 (compiled with Erlang/OTP 21) You may now proceed to the Basics .","title":"Install Elixir"},{"location":"0-prerequisites/prerequisites/","text":"Prerequisites Mac OS Follow the instructions for Mac OS . Linux Follow the instructions for Linux . Windows Learn Linux. ;) Seriously, it's a skill that'll help deal with > 90% of the infrastructure on the Internet anyway. First install VirtualBox . Next, choose a beginner-friendly Linux distribution. I recommend Ubuntu . Follow guides such as How to Install Ubuntu Linux on VirtualBox on Windows 10 [Step by Step Guide] to install and run Ubuntu Linux under VirtualBox. Then follow the instructions for Linux . Alternatively, follow the Elixir instructions and install Elixir using the Windows installer.","title":"Prerequisites"},{"location":"0-prerequisites/prerequisites/#prerequisites","text":"","title":"Prerequisites"},{"location":"0-prerequisites/prerequisites/#mac-os","text":"Follow the instructions for Mac OS .","title":"Mac OS"},{"location":"0-prerequisites/prerequisites/#linux","text":"Follow the instructions for Linux .","title":"Linux"},{"location":"0-prerequisites/prerequisites/#windows","text":"Learn Linux. ;) Seriously, it's a skill that'll help deal with > 90% of the infrastructure on the Internet anyway. First install VirtualBox . Next, choose a beginner-friendly Linux distribution. I recommend Ubuntu . Follow guides such as How to Install Ubuntu Linux on VirtualBox on Windows 10 [Step by Step Guide] to install and run Ubuntu Linux under VirtualBox. Then follow the instructions for Linux . Alternatively, follow the Elixir instructions and install Elixir using the Windows installer.","title":"Windows"},{"location":"1-basics/basics/","text":"Elixir Basics Basic Types and Literals Elixir, similar to Ruby, is a strongly-typed language, but it is not a statically typed language. That is, while values and expressions belong to a specific type , the language's syntax doesn't require you to specify what those types will be. There is a way to specify types and catch type errors before run-time using dialyzer and dialyxir but that's a topic for future discussion. Integers: 1 , -1 , 42 , 1_000 Floating point: 0.1 , 3.14159265358979 , 1_000.5 Atoms: :atom Strings: \"Hello, world.\" Collections Tuples {} {1, 2, 3} {\"one\", \"two\", \"three\"} {:one, :two, :three} {1, \"two\", :three} Lists [] [1, 2, 3] [\"one\", \"two\", \"three\"] [:one, :two, :three] [1, \"two\", :three] Maps %{} %{1 => \"one\", 2 => \"two\", 3 => \"three\"} %{\"one\" => 1, \"two\" => 2, \"three\" => 3} %{:one => 1, :two => 2, :three => 3} %{one: 1, two: 2, three: 3} %{1 => \"one\", \"two\" => 2, three: :three} Keyword Lists [one: 1, two: \"two\", three: :three] Structs iex> defmodule Point do defstruct x: 0.0, y: 0.0 end iex> %Point{} %Point{x: 0.0, y: 0.0} iex> %Point{x: 4, y: 5} %Point{x: 4, y: 5} iex> %Point{x: \"four\", y: 5} %Point{x: \"four\", y: 5}","title":"Basics"},{"location":"1-basics/basics/#elixir-basics","text":"","title":"Elixir Basics"},{"location":"1-basics/basics/#basic-types-and-literals","text":"Elixir, similar to Ruby, is a strongly-typed language, but it is not a statically typed language. That is, while values and expressions belong to a specific type , the language's syntax doesn't require you to specify what those types will be. There is a way to specify types and catch type errors before run-time using dialyzer and dialyxir but that's a topic for future discussion. Integers: 1 , -1 , 42 , 1_000 Floating point: 0.1 , 3.14159265358979 , 1_000.5 Atoms: :atom Strings: \"Hello, world.\"","title":"Basic Types and Literals"},{"location":"1-basics/basics/#collections","text":"","title":"Collections"},{"location":"1-basics/basics/#tuples","text":"{} {1, 2, 3} {\"one\", \"two\", \"three\"} {:one, :two, :three} {1, \"two\", :three}","title":"Tuples"},{"location":"1-basics/basics/#lists","text":"[] [1, 2, 3] [\"one\", \"two\", \"three\"] [:one, :two, :three] [1, \"two\", :three]","title":"Lists"},{"location":"1-basics/basics/#maps","text":"%{} %{1 => \"one\", 2 => \"two\", 3 => \"three\"} %{\"one\" => 1, \"two\" => 2, \"three\" => 3} %{:one => 1, :two => 2, :three => 3} %{one: 1, two: 2, three: 3} %{1 => \"one\", \"two\" => 2, three: :three}","title":"Maps"},{"location":"1-basics/basics/#keyword-lists","text":"[one: 1, two: \"two\", three: :three]","title":"Keyword Lists"},{"location":"1-basics/basics/#structs","text":"iex> defmodule Point do defstruct x: 0.0, y: 0.0 end iex> %Point{} %Point{x: 0.0, y: 0.0} iex> %Point{x: 4, y: 5} %Point{x: 4, y: 5} iex> %Point{x: \"four\", y: 5} %Point{x: \"four\", y: 5}","title":"Structs"},{"location":"1-basics/tools/","text":"Elixir Toolchain iex The Elixir Interactive Shell , or iex , is an invaluable tool to quickly try out Elixir code, or even to debug complex Elixir applications. $ iex Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Interactive Elixir (1.10.3) - press Ctrl+C to exit (type h() ENTER for help) iex(1)> (Press Ctrl+C or Ctrl+\\ to exit iex and return to the operating system shell.) The number in parenthesis at the iex prompt is the \"line number\", and can be used to retrieve previously evaluated values . For some general help with using iex , simply type h then press Enter: iex(1)> h IEx.Helpers Welcome to Interactive Elixir. You are currently seeing the documentation for the module IEx.Helpers which provides many helpers to make Elixir's shell more joyful to work with. This message was triggered by invoking the helper h(), usually referred to as h/0 (since it expects 0 arguments). . . . Throughtout this tutorial, we will frequently use iex to quickly demonstrate or try out Elixir code, but we will disregard the line number (the (1) above). For example, the following example shows how to get the current OTP version in Elixir: iex> :erlang.system_info(:otp_release) '22' mix Mix is a code generator, dependency management, build tool, and packaging tool all in one, among other things. $ mix --version Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Mix 1.10.3 (compiled with Erlang/OTP 21) We'll explore mix more specifically as we get to later sections. For now, let's just install Hex , the package manager for the Elixir ecosystem, and rebar : $ mix local.hex Are you sure you want to install \"https://repo.hex.pm/installs/1.10.0/hex-0.20.5.ez\"? [Yn] y * creating .asdf/installs/elixir/1.10.3/.mix/archives/hex-0.20.5 $ mix local.rebar * creating .asdf/installs/elixir/1.10.3/.mix/rebar * creating .asdf/installs/elixir/1.10.3/.mix/rebar3 Next, let's wrap our heads around Elixir Basics .","title":"Tools"},{"location":"1-basics/tools/#elixir-toolchain","text":"","title":"Elixir Toolchain"},{"location":"1-basics/tools/#iex","text":"The Elixir Interactive Shell , or iex , is an invaluable tool to quickly try out Elixir code, or even to debug complex Elixir applications. $ iex Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Interactive Elixir (1.10.3) - press Ctrl+C to exit (type h() ENTER for help) iex(1)> (Press Ctrl+C or Ctrl+\\ to exit iex and return to the operating system shell.) The number in parenthesis at the iex prompt is the \"line number\", and can be used to retrieve previously evaluated values . For some general help with using iex , simply type h then press Enter: iex(1)> h IEx.Helpers Welcome to Interactive Elixir. You are currently seeing the documentation for the module IEx.Helpers which provides many helpers to make Elixir's shell more joyful to work with. This message was triggered by invoking the helper h(), usually referred to as h/0 (since it expects 0 arguments). . . . Throughtout this tutorial, we will frequently use iex to quickly demonstrate or try out Elixir code, but we will disregard the line number (the (1) above). For example, the following example shows how to get the current OTP version in Elixir: iex> :erlang.system_info(:otp_release) '22'","title":"iex"},{"location":"1-basics/tools/#mix","text":"Mix is a code generator, dependency management, build tool, and packaging tool all in one, among other things. $ mix --version Erlang/OTP 22 [erts-10.7.1] [source] [64-bit] [smp:12:12] [ds:12:12:10] [async-threads:1] [hipe] Mix 1.10.3 (compiled with Erlang/OTP 21) We'll explore mix more specifically as we get to later sections. For now, let's just install Hex , the package manager for the Elixir ecosystem, and rebar : $ mix local.hex Are you sure you want to install \"https://repo.hex.pm/installs/1.10.0/hex-0.20.5.ez\"? [Yn] y * creating .asdf/installs/elixir/1.10.3/.mix/archives/hex-0.20.5 $ mix local.rebar * creating .asdf/installs/elixir/1.10.3/.mix/rebar * creating .asdf/installs/elixir/1.10.3/.mix/rebar3 Next, let's wrap our heads around Elixir Basics .","title":"mix"},{"location":"phoenix/installation/","text":"$ mix archive.install hex phx_new 1.5.1 Resolving Hex dependencies... Dependency resolution completed: New: phx_new 1.5.1 * Getting phx_new (Hex package) All dependencies are up to date Compiling 10 files (.ex) Generated phx_new app Generated archive \"phx_new-1.5.1.ez\" with MIX_ENV=prod Are you sure you want to install \"phx_new-1.5.1.ez\"? [Yn] y * creating ~/.asdf/installs/elixir/1.10.3/.mix/archives/phx_new-1.5.1","title":"Installation"}]}